- name: Install packages that allow apt to be used over HTTPS
  apt: 
    name='{{ item.name }}'
    state=present
    update_cache=yes
  with_items: "{{ https_packages | default([]) }}"


- name: Add new repositories keys
  apt_key:
    url='{{item.key}}'
    state=present
  with_items: "{{ gpg_keys | default([]) }}"


- name: Add new apt repositories
  apt_repository:
    repo='{{item.repo}}'
    state=present
  with_items: "{{ repositories | default([]) }}"


- name: Install docker
  apt: 
    name="{{ item.name }}"
    state=present
    update_cache=yes
  with_items: "{{ docker_packages | default([]) }}"
  notify:
    - docker status

- name: Change Docker cgroup driver - Create daemon.json file
  file:
    path: "/etc/docker/daemon.json"
    state: touch

- name: Change Docker cgroup driver - Edit daemon.json file
  blockinfile:
    path: "/etc/docker/daemon.json"
    block: |
            { "exec-opts": ["native.cgroupdriver=systemd"],
            "log-driver": "json-file",
            "log-opts":
            { "max-size": "100m" },
            "storage-driver": "overlay2"
            }
    marker: ""

- name: Restart service docker
  systemd:
    state: restarted
    daemon_reload: yes
    name: docker

- name: Restart et enable docker by commande
  command: "{{ item }}"
  with_items:
    - systemctl enable docker
    - systemctl daemon-reload
    - systemctl restart docker

- name: Add vagrant user to docker group
  user:
    name: vagrant
    group: docker


- name: Remove swapfile from /etc/fstab
  mount:
    name: "{{ item }}"
    fstype: swap
    state: absent
  with_items:
    - swap
    - none


- name: Disable swap
  command: swapoff -a
  when: ansible_swaptotal_mb > 0

- name: iptable see bridge traffic
  command: sysctl net.bridge.bridge-nf-call-iptables=1
  
- name: Install Kubernetes binaries
  apt: 
    name="{{ item.name }}"
    state=present
    update_cache=yes
  with_items: "{{ k8s_packages | default([]) }}"

- name: Configure node ip
  lineinfile:
    path: '/etc/systemd/system/kubelet.service.d/10-kubeadm.conf'
    line: 'Environment="KUBELET_EXTRA_ARGS=--node-ip={{ srv_ip }}"'
    regexp: 'KUBELET_EXTRA_ARGS='
    insertafter: '\[Service\]'
    state: present
  notify:
    - restart kubelet

- name: add auto completion kubectl
  command: "{{ item }}"
  with_items:
    - echo 'source <(kubectl completion bash)' >> ~/.bashrc
    - echo 'source <(kubectl completion bash)' >> /home/vagrant/.bashrc
    #- kubectl completion bash > /etc/bash_completion.d/kubectl
  become: true  
  tags:
    - comp

#- name: add auto completion kubectl for all
#  template: src=templates/autocomp.j2 dest=/etc/bash_completion.d/kubectl owner=root group=root
#  ignore_errors: true

- name: Generate completion command
  command: kubectl completion bash
  register: completion_command
  ignore_errors: true
  tags:
    - comp

- name: Copy comletion commande to the kubectl config file to localhost
  delegate_to: localhost
  copy:
    content: "{{ completion_command.stdout }}"
    dest: ./completion-command  
  tags: comp
  ignore_errors: true  

- name: Copy the completion command to server location
  copy: src=completion-command dest=/etc/bash_completion.d/kubectl mode=0777
  tags:
    - comp
  ignore_errors: true  
  